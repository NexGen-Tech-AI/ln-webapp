name: Deploy to Staging

on:
  push:
    branches: [develop, staging]
  pull_request:
    branches: [main, master]

env:
  NODE_VERSION: '18.x'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint || true
    
    - name: Run type check
      run: npm run typecheck || true
    
    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.STAGING_NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.STAGING_NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        NEXT_PUBLIC_APP_URL: ${{ secrets.STAGING_APP_URL }}

  deploy-preview:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install Vercel CLI
      run: npm i -g vercel@latest
    
    - name: Pull Vercel Environment Information
      run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
    
    - name: Build Project Artifacts
      run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
    
    - name: Deploy to Vercel Preview
      id: deploy
      run: |
        deployment_url=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
        echo "deployment_url=$deployment_url" >> $GITHUB_OUTPUT
    
    - name: Comment PR with preview URL
      uses: actions/github-script@v6
      with:
        script: |
          const deploymentUrl = '${{ steps.deploy.outputs.deployment_url }}';
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸš€ Preview deployment ready!\n\nðŸ”— Preview: ${deploymentUrl}\n\n_This preview will be automatically deleted when the PR is merged or closed._`
          })

  deploy-staging:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
      env:
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.STAGING_NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.STAGING_NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        NEXT_PUBLIC_APP_URL: ${{ secrets.STAGING_APP_URL }}
    
    - name: Setup SSH Key
      env:
        SSH_PRIVATE_KEY: ${{ secrets.STAGING_SSH_KEY }}
      run: |
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -p ${{ secrets.STAGING_SSH_PORT || 22 }} ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts
    
    - name: Create deployment package
      run: |
        mkdir -p .deploy
        cp -r .next .deploy/
        cp -r public .deploy/
        cp package*.json .deploy/
        cp server.js .deploy/
        cp ecosystem.config.js .deploy/
        cp next.config.js .deploy/
        
        # Create staging .env.local
        cat > .deploy/.env.local << EOF
        NEXT_PUBLIC_SUPABASE_URL=${{ secrets.STAGING_NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.STAGING_NEXT_PUBLIC_SUPABASE_ANON_KEY }}
        SUPABASE_SERVICE_ROLE_KEY=${{ secrets.STAGING_SUPABASE_SERVICE_ROLE_KEY }}
        NEXT_PUBLIC_APP_URL=${{ secrets.STAGING_APP_URL }}
        SENDGRID_API_KEY=${{ secrets.STAGING_SENDGRID_API_KEY }}
        SENDGRID_FROM_EMAIL=${{ secrets.STAGING_SENDGRID_FROM_EMAIL }}
        NODE_ENV=staging
        EOF
    
    - name: Deploy to Staging VPS
      env:
        STAGING_USER: ${{ secrets.STAGING_USER }}
        STAGING_HOST: ${{ secrets.STAGING_HOST }}
        STAGING_DIR: ${{ secrets.STAGING_DIR || '/var/www/lifenav-staging' }}
        SSH_PORT: ${{ secrets.STAGING_SSH_PORT || 22 }}
      run: |
        cd .deploy
        tar -czf ../deploy.tar.gz .
        cd ..
        
        # Upload to staging server
        scp -P $SSH_PORT deploy.tar.gz $STAGING_USER@$STAGING_HOST:/tmp/
        
        # Deploy on staging server
        ssh -p $SSH_PORT $STAGING_USER@$STAGING_HOST << 'ENDSSH'
        set -e
        
        cd ${{ env.STAGING_DIR }} || mkdir -p ${{ env.STAGING_DIR }} && cd ${{ env.STAGING_DIR }}
        
        # Extract new deployment
        tar -xzf /tmp/deploy.tar.gz
        rm /tmp/deploy.tar.gz
        
        # Install dependencies
        npm ci --production
        
        # Restart with PM2
        pm2 reload lifenav-staging || pm2 start ecosystem.config.js --name lifenav-staging
        pm2 save
        
        echo "âœ… Staging deployment complete!"
        ENDSSH
    
    - name: Cleanup
      if: always()
      run: |
        rm -rf ~/.ssh/id_rsa
        rm -rf .deploy deploy.tar.gz